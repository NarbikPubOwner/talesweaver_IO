import GameInformation as GI;
import GlobalConstant as GC;
import Utility;

var RemoveRevealer_flag = true;
var enhancementBulidingId = 166;
const buildingXYArr = EUDArray(list(EUDArray(list(1008,704)),EUDArray(list(2480,704)),EUDArray(list(1008,2176)),EUDArray(list(2480,2176))));
const s = StringBuffer(1024);

/**
 * 리빌러 제거 실행
 */
function Init() {

}

function Loop() {
	//맵에 깔린 리빌러 삭제
	if (RemoveRevealer_flag == true) {
		RemoveUnit("Map Revealer", AllPlayers);
		RemoveRevealer_flag = false;
	}
	foreach (cp : EUDLoopPlayer(None,Force1)) {
		const buildingXY = EUDArray.cast(buildingXYArr[cp]);

		setloc("Loc1",buildingXY[0] , buildingXY[1]);
		CreateUnit(1, GC.enhancementBulidingId, "Loc1", cp);
		setloc("Loc1",buildingXY[0]+96 , buildingXY[1]);
		CreateUnit(1, GC.huntZoneManageBuildingId, "Loc1", cp);
		setloc("Loc1",buildingXY[0]+192 , buildingXY[1]);
		CreateUnit(1, GC.BGMManageBuildingId, "Loc1", cp);

		// switch (cp) {
		// 	case 0:
		// 		setloc("Loc1",1008,704);
		// 		CreateUnit(1, GC.enhancementBulidingId, "Loc1", cp);
		// 		setloc("Loc1",1104,704);
		// 		CreateUnit(1, GC.huntZoneManageBuildingId, "Loc1", cp);
		// 		setloc("Loc1",1200,704);
		// 		CreateUnit(1, GC.BGMManageBuildingId, "Loc1", cp);
		// 		break;
		// 	case 1:
		// 		setloc("Loc1",2480,704);
		// 		CreateUnit(1, 164, "Loc1", cp);
		// 		setloc("Loc1",2576,704);
		// 		CreateUnit(1, 155, "Loc1", cp);
		// 		setloc("Loc1",2672,704);
		// 		//CreateUnit(1, fixedData.skillManageUnitId, "Loc1", cp);
		// 		break;
		// 	case 2:
		// 		setloc("Loc1",1008,2176);
		// 		CreateUnit(1, 164, "Loc1", cp);
		// 		setloc("Loc1",1104,2176);
		// 		CreateUnit(1, 155, "Loc1", cp);
		// 		setloc("Loc1",1200,2176);
		// 		//CreateUnit(1, fixedData.skillManageUnitId, "Loc1", cp);
		// 		break;
		// 	case 3:
		// 		setloc("Loc1",2480,2176);
		// 		CreateUnit(1, 164, "Loc1", cp);
		// 		setloc("Loc1",2576,2176);
		// 		CreateUnit(1, 155, "Loc1", cp);
		// 		setloc("Loc1",2672,2176);
		// 		//CreateUnit(1, fixedData.skillManageUnitId, "Loc1", cp);
		// 		break;
		// 	default:
		// 		break;
		// }
	}

	GI.GameStepUpdate();
}
