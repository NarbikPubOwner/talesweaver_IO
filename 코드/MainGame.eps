import Utility;

import GameInformation as GI;
import GlobalConstant as GC;
import PlayerInformation as PI;
import UnitSkillSystem;
import MouseSystem;
import PlayerbleCharacterSkill;
import HuntZoneSystem;
import BossStageSystem;
import TETools;

const s = StringBuffer();

const enenmy_player = 4;

const P1_hunt_zone = UnitGroup(1000);
const P2_hunt_zone = UnitGroup(1000);
const P3_hunt_zone = UnitGroup(1000);
const P4_hunt_zone = UnitGroup(1000);
const boss_zone = UnitGroup(1000);

const group_list = list(P1_hunt_zone, P2_hunt_zone, P3_hunt_zone, P4_hunt_zone, boss_zone);
const huntZoneList = list(P1_hunt_zone, P2_hunt_zone, P3_hunt_zone, P4_hunt_zone);

const hunt_zone_list = EUDArray(list($L("p1_hunt_zone"), $L("p2_hunt_zone"), $L("p3_hunt_zone"), $L("p4_hunt_zone"), $L("boss_zone")));

/**
 * 유닛 타입을 정해서 유닛을 생성하는 기능, 1회 최대 생성개수는 1개로 고정 @tags
 * @param {any} Unit  베이스 유닛
 * @param {any} Where 생성위치 로케이션, $l("loc1") 형식으로 사용 해야함
 * @param {any} ForPlayer 생성 된 유닛을 소유 할 플레이어
 * @param {any} UnitType 유닛의 종류 / 0 : 일반 적 유닛, 1 : 플레이어블 캐릭터 유닛, 2 : 보스 유닛
 * @param {any} GroupNum 어느 유닛 그룹에 속하는지 0~3 플레이어 사냥 존 / 4 보스존
 * @param {any} Hp 현재 체력 설정
 */
function CreateUnitBasic(Unit, Where : TrgLocation, ForPlayer, UnitType, GroupNum) {
    const epd = epdread_epd(EPD(0x628438));
    CreateUnit(1, Unit, Where, ForPlayer);
    Utility.SetUnitType(epd, UnitType);
    if (GroupNum != 4) {
        PI.characterEpd[ForPlayer] = epd;
    }
    EUDSwitch(GroupNum);
    foreach (i, group : py_enumerate(group_list)) {
        EUDSwitchCase()(i);
        group.add(epd);
        if (GroupNum != 4) {//사냥존에 생성하는 경우이면
            if (bread_epd(epd + 0x4C/4, 0) == GC.enemyPlayer) {
               PI.huntZoneEnemyCount[GroupNum]++; 
            }            
        }
        
        break;
    }
    EUDEndSwitch();

    return epd;
}

function HandleUnitSpecificInput() {
    foreach (cp : EUDLoopPlayer(None, Force1)) {
        setcurpl(cp);
        const clickedPTR, clickedEPD = dwepdread_epd(EPD(0x6284E8) + 12*cp);// 유저가 선택한 유닛의 ptr과 epd
    
        if(clickedPTR > 0 && bread_epd(clickedEPD + 0x4C/4, 0) == cp){ //유닛을 클릭한 상태라면
            if (MemoryEPD(clickedEPD + 0x64/4, Exactly, PI.class_id[cp])) {//플레이어블 유닛
                if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[0]*65536)) {
                    setcurpl(cp);
                    s.print("1번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[1]*65536)) {
                    setcurpl(cp);
                    s.print("2번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[2]*65536)) {
                    setcurpl(cp);
                    s.print("3번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[3]*65536)) {//Q
                    setcurpl(cp);
                    s.print("4번 버튼 실행");
                    UnitSkillSystem.addExecutor(cp, clickedEPD, 4, PlayerbleCharacterSkill.f_impl);
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[4]*65536)) {//W
                    setcurpl(cp);
                    s.print("5번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[5]*65536)) {//E
                    if (PI.EskillCanUseFlag[cp]) UnitSkillSystem.addExecutor(cp, clickedEPD, 6, PlayerbleCharacterSkill.f_impl);
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[6]*65536)) {//R
                    setcurpl(cp);
                    s.print("7번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[7]*65536)) {//T
                    setcurpl(cp);
                    s.print("8번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[8]*65536)) {//Space
                    setcurpl(cp);
                    s.print("9번 버튼 실행");
                }
                wwrite_epd(clickedEPD+0x98/4,0, $U("Terran Marine")); // 첫 슬롯에 단일스킬
                wwrite_epd(clickedEPD+0x98/4,2, 228); // 두번째 슬롯 비우기
                wwrite_epd(clickedEPD+0x9C/4,0, 228); // 세번째
                wwrite_epd(clickedEPD+0x9C/4,2, 228); // 네번째
                wwrite_epd(clickedEPD+0xA0/4,0, 228); // 다섯번째
            }
            if (MemoryEPD(clickedEPD + 0x64/4, Exactly, 114) ) {//
                if (@KeyDown(cp,"X")) {
                    //사냥 스테이지 제한시간 끝내기
                    HuntZoneSystem.huntStageTimer = HuntZoneSystem.stageTimeLimit;
                }
                else if (@KeyDown(cp,"C")) {
                   //보스 스테이지 클리어 하기
                }
            }
            if (MemoryEPD(clickedEPD + 0x64/4, Exactly, 155)) {//플레이어블 유닛
                if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[0]*65536)) {
                    setcurpl(cp);
                    
                    if (PI.hunt_zone_level[cp] > PI.hunt_zone_level_min) {
                        printAll("사냥터 레벨 감소");
                        PI.huntZoneLevelDecrease(cp);
                        HuntZoneSystem.InitHuntZone(cp);
                        
                    }
                    else {
                        println("사냥터 레벨이 이미 최하입니다");
                    }
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[1]*65536)) {
                    setcurpl(cp);
                    if (PI.hunt_zone_level[cp] < PI.hunt_zone_level_max) {
                        printAll("사냥터 레벨 증가");
                        PI.huntZoneLevelIncrease(cp);
                        HuntZoneSystem.InitHuntZone(cp);
                    }
                    else {
                        println("사냥터 레벨이 이미 최대입니다");
                    }
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[2]*65536)) {
                    setcurpl(cp);
                    s.print("3번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[3]*65536)) {//Q
                    setcurpl(cp);
                    s.print("4번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[4]*65536)) {//W
                    setcurpl(cp);
                    s.print("5번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[5]*65536)) {//E
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[6]*65536)) {//R
                    setcurpl(cp);
                    s.print("7번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[7]*65536)) {//T
                    setcurpl(cp);
                    s.print("8번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[8]*65536)) {//Space
                    setcurpl(cp);
                    s.print("9번 버튼 실행");
                }
                wwrite_epd(clickedEPD+0x98/4,0, $U("Terran Marine")); // 첫 슬롯에 단일스킬
                wwrite_epd(clickedEPD+0x98/4,2, 228); // 두번째 슬롯 비우기
                wwrite_epd(clickedEPD+0x9C/4,0, 228); // 세번째
                wwrite_epd(clickedEPD+0x9C/4,2, 228); // 네번째
                wwrite_epd(clickedEPD+0xA0/4,0, 228); // 다섯번째
            }
           
        }
    }
}

function LoopQSkill () {
    foreach (cp : EUDLoopPlayer(None,Force1)) {
        UnitSkillSystem.addExecutor(cp, PI.characterEpd[cp], 4, PlayerbleCharacterSkill.f_impl);
    }
}

function Loop() {
    HandleUnitSpecificInput();
    HuntZoneSystem.HuntStageProgress();
    BossStageSystem.BossStageProgress();

    LoopQSkill(); 

    //스테이지 전환 시 순간이동 기능
    foreach (cp : EUDLoopPlayer(None,Force1)) {
        //사냥존 -> 보스존
        if (Bring(cp, Exactly, 1, PI.class_id[cp], $L("huntToBossTelpo1")+cp)) {
            MoveUnit(1, Utility.GetUnitGroup(PI.characterEpd[cp]), cp, $L("huntToBossTelpo1")+cp, "bossZoneTelpoDestination");
            CreateUnit(1, "Scanner Sweep", "Loc1", P8);
            PlayWAV("staredit\\wav\\0103.WAV");
            RemoveUnit("Scanner Sweep", P8);
            setcurpl(cp);
            CenterView("bossZoneTelpoDestination");
        }
        
        //보스존 -> 사냥존 - 보스 스테이지면 작동하지 않도록
        if (GI.stageNum == 0) {
            setloc("Loc1", GC.hunt_zone_center_x[cp], GC.hunt_zone_center_y[cp]);
            if (Bring(cp, Exactly, 1, PI.class_id[cp], "bossZoneTeleportation")) {
                MoveUnit(1, Utility.GetUnitGroup(PI.characterEpd[cp]), cp, $L("bossZoneTeleportation"), "Loc1");
                CreateUnit(1, "Scanner Sweep", "Loc1", P8);
                PlayWAV("staredit\\wav\\0103.WAV");
                RemoveUnit("Scanner Sweep", P8);
                setcurpl(cp);
                CenterView("Loc1");
            }
        }
    }
    

    //유저 부활 기능
    foreach (cp : EUDLoopPlayer(None,Force1)) {
        //사냥 스테이지라면
        if (GI.stageNum == 0) {
            if (PI.stageNumOfDeath[cp] == 0) {//사망 시점이 사냥 스테이지라면
                // 현재 체력 (*256 되어있음)
                const curHp = dwread_epd(PI.graveStoneEpd[cp] + 0x08 / 4); //읽기
                const maxHp = dwread(0x662350 + 129 * 4);
                //비석의 체력이 100%라면
                if (curHp >= maxHp) {
                    // 비석 삭제
                    KillUnit(GC.graveStoneId, cp);
                    // 사냥 존 중앙에 유저 캐릭터 부활
                    setloc("Loc1", GC.hunt_zone_center_x[cp], GC.hunt_zone_center_y[cp]);
                    CreateUnitBasic(PI.class_id[cp], "Loc1", cp, 1, cp);
                    SetMemoryX(0x666458, SetTo, 391, 0xFFFF);
                    CreateUnit(1, "Scanner Sweep", "Loc1", P8);
                    PlayWAV("staredit\\wav\\0103.WAV");
                    RemoveUnit("Scanner Sweep", P8);
                    PI.stageNumOfDeath[cp] = -1;
                    setcurpl(cp);
                    CenterView("Loc1");
                }
                //비석의 체력이 100%가 아니라면
                else {
                    // 비석의 체력 회복
                    dwwrite_epd(PI.graveStoneEpd[cp] + 0x08 / 4, curHp+20*256);
                }  
            }
            else if(PI.stageNumOfDeath[cp] == 1){//사망 시점이 보스 스테이지라면
                KillUnit(GC.graveStoneId, cp);//비석 삭제
                setloc("Loc1", GC.hunt_zone_center_x[cp], GC.hunt_zone_center_y[cp]);
                CreateUnitBasic(PI.class_id[cp], "Loc1", cp, 1, cp);
                SetMemoryX(0x666458, SetTo, 391, 0xFFFF);
                CreateUnit(1, "Scanner Sweep", "Loc1", P8);
                PlayWAV("staredit\\wav\\0103.WAV");
                RemoveUnit("Scanner Sweep", P8);
                PI.stageNumOfDeath[cp] = -1;
                setcurpl(cp);
                CenterView("Loc1");
            }
        }
        //보스 스테이지라면
        else if(GI.stageNum == 1){
            if (PI.stageNumOfDeath[cp] == 1) {//사망 시점이 보스 스테이지라면
                // 현재 체력 (*256 되어있음)
                const curHp = dwread_epd(PI.graveStoneEpd[cp] + 0x08 / 4); //읽기
                const maxHp = dwread(0x662350 + 129 * 4);
                const positionX = dwread_epd(PI.graveStoneEpd[cp] + 0x02C / 4)/256;
                const positionY = dwread_epd(PI.graveStoneEpd[cp] + 0x030 / 4)/256;
                //비석의 체력이 100%라면
                if (curHp >= maxHp) {
                    // 비석 삭제
                    KillUnit(GC.graveStoneId, cp);
                    // 비석 자리에서 그대로 부활
                    setloc("Loc1", positionX, positionY);
                    CreateUnitBasic(PI.class_id[cp], "Loc1", cp, 1, cp);
                    SetMemoryX(0x666458, SetTo, 391, 0xFFFF);
                    CreateUnit(1, "Scanner Sweep", "Loc1", P8);
                    PlayWAV("staredit\\wav\\0103.WAV");
                    RemoveUnit("Scanner Sweep", P8);
                    PI.stageNumOfDeath[cp] = -1;
                    setcurpl(cp);
                    CenterView("Loc1");
                }
                //비석의 체력이 100%가 아니라면
                else {
                    /*
                    다른 유저가 근처에 오면 비석의 체력 회복
                     */
                    setloc("Loc1" , positionX, positionY);//비석 기준 로케이션을 정하기
                    dilateloc("Loc1", 48, 48); //영향 범위 설정 - 일단 96으로 -> 48
                    //유닛 그룹을 돌면서 유저 유닛이면서 비석 근처에 있는 걸 찾기
                    foreach(unit : boss_zone.cploop) {
                        const epd = unit.epd;
                        if (Utility.GetUnitType(epd) == 1) {
                            if ( TETools.CBringEPD(epd, "Loc1", GC.dummyUnit)) {//비석 근처에 유저가 있다면 회복(1번만 하기, 유닛그룹 탈출?)
                                dwwrite_epd(PI.graveStoneEpd[cp] + 0x08 / 4, curHp+20*256);
                                break;
                            }
                        }
                    }
                }
            }
            else if(PI.stageNumOfDeath[cp] == 0){//사망 시점이 사냥 스테이지라면
                KillUnit(GC.graveStoneId, cp);//비석 삭제
                setloc("Loc1", GC.hunt_zone_center_x[cp], GC.hunt_zone_center_y[cp]);
                CreateUnitBasic(PI.class_id[cp], "Loc1", cp, 1, cp);
                SetMemoryX(0x666458, SetTo, 391, 0xFFFF);
                CreateUnit(1, "Scanner Sweep", "Loc1", P8);
                PlayWAV("staredit\\wav\\0103.WAV");
                RemoveUnit("Scanner Sweep", P8);
                PI.stageNumOfDeath[cp] = -1;
                setcurpl(cp);
                CenterView("Loc1");
            }
        }
    }
    

    foreach (cp : EUDLoopPlayer(None,Force1)) {
        //플레이어 유닛의 업그레이드에 따른 체력 증가
        const hpUgradeLevelInDat = bread(0x58F332+cp*15);
        if (hpUgradeLevelInDat != PI.hPUpgradeLevel[cp]) {
            SetMemory(0x662350 + PI.class_id[cp] * 4, Add,  5*256);
            PI.hPUpgradeLevel[cp]++;
        }
        //사냥 존에서 죽은 유닛 제거 및 최대치 조정
        EUDSwitch(cp);
        foreach (i, group : py_enumerate(huntZoneList)) {
            EUDSwitchCase()(i);
            foreach(unit : group.cploop) {
                const epd = unit.epd;
                
                foreach(dead : unit.dying) {
                    if (bread_epd(epd + 0x4C/4, 0) == GC.enemyPlayer) {
                        PI.huntZoneEnemyCount[cp] -= 1;
                    }
                     /*
                     플레이어블 캐릭터 사망시 처리
                      */
                    if (Utility.GetUnitType(epd) == 1) {
                        if (GI.stageNum == 0) {
                            HuntZoneSystem.InitHuntZone(cp);
                            const nextEpd = epdread_epd(EPD(0x628438));
                            setloc("Loc1", GC.hunt_zone_center_x[cp], GC.hunt_zone_center_y[cp]);
                            CreateUnit(1, GC.graveStoneId, "Loc1", cp);
                            dwwrite_epd(nextEpd + 0x08 / 4, 0);//체력 0으로 시작
                            PI.hunt_zone_level[cp] = 0;
                            PI.stageNumOfDeath[cp] = 0;
                            PI.graveStoneEpd[cp] = nextEpd;
                        }
                    }
                    
                }
            }
            break;
        }
        EUDEndSwitch();
        //보스 존에서 죽은 유닛 제거
        foreach(unit : boss_zone.cploop) {
            const epd = unit.epd;
            foreach(dead : unit.dying) {
                /*
                플레이어블 캐릭터가 사망한 경우
                */
                if (Utility.GetUnitType(epd) == 1) {
                    if(GI.stageNum == 1){
                        const positionX = dwread_epd(epd + 0x02C / 4)/256;
                        const positionY = dwread_epd(epd + 0x030 / 4)/256;
                        const cp = bread_epd(epd + 0x4C/4, 0);
                        const nextEpd = epdread_epd(EPD(0x628438));
                        setloc("Loc1", positionX, positionY);
                        CreateUnit(1, GC.graveStoneId, "Loc1", cp);
                        dwwrite_epd(nextEpd + 0x08 / 4, 0);//체력 0으로 시작
                        PI.stageNumOfDeath[cp] = 1;
                        PI.graveStoneEpd[cp] = nextEpd;
                    }   
                }
            }
        }
    }
}