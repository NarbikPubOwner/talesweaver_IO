import Utility;

import GameInformation as GI;
import GlobalConstant as GC;
import PlayerInformation as PI;
import UnitSkillSystem;
import MouseSystem;
import PlayerbleCharacterSkill;
import HuntZoneSystem;

const s = StringBuffer();

const enenmy_player = 4;

const P1_hunt_zone = UnitGroup(1000);
const P2_hunt_zone = UnitGroup(1000);
const P3_hunt_zone = UnitGroup(1000);
const P4_hunt_zone = UnitGroup(1000);
const boss_zone = UnitGroup(1000);

const group_list = list(P1_hunt_zone, P2_hunt_zone, P3_hunt_zone, P4_hunt_zone);

const hunt_zone_list = EUDArray(list($L("p1_hunt_zone"), $L("p2_hunt_zone"), $L("p3_hunt_zone"), $L("p4_hunt_zone"), $L("boss_zone")));

/**
 * 유닛 타입을 정해서 유닛을 생성하는 기능, 1회 최대 생성개수는 1개로 고정 @tags
 * @param {any} Unit  베이스 유닛
 * @param {any} Where 생성위치 로케이션, $l("loc1") 형식으로 사용 해야함
 * @param {any} ForPlayer 생성 된 유닛을 소유 할 플레이어
 * @param {any} UnitType 유닛의 종류 / 0 : 일반 적 유닛, 1 : 플레이어블 캐릭터 유닛, 2 : 보스 유닛
 * @param {any} GroupNum 어느 유닛 그룹에 속하는지 0~3 플레이어 사냥 존 / 4 보스존
 * @param {any} Hp 현재 체력 설정
 */
function CreateUnitBasic(Unit, Where : TrgLocation, ForPlayer, UnitType, GroupNum) {
    const epd = epdread_epd(EPD(0x628438));
    CreateUnit(1, Unit, Where, ForPlayer);
    Utility.SetUnitType(epd, UnitType);

    EUDSwitch(GroupNum);
    foreach (i, group : py_enumerate(group_list)) {
        EUDSwitchCase()(i);
        group.add(epd);
        PI.hunt_zone_unit_count[GroupNum]++;
        break;
    }
    EUDEndSwitch();
}

function HandleUnitSpecificInput() {
    foreach (cp : EUDLoopPlayer(None, Force1)) {
        setcurpl(cp);
        const clickedPTR, clickedEPD = dwepdread_epd(EPD(0x6284E8) + 12*cp);// 유저가 선택한 유닛의 ptr과 epd
    
        if(clickedPTR > 0 && bread_epd(clickedEPD + 0x4C/4, 0) == cp){ //유닛을 클릭한 상태라면
            if (MemoryEPD(clickedEPD + 0x64/4, Exactly, PI.class_id[cp])) {//플레이어블 유닛
                if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[0]*65536)) {
                    setcurpl(cp);
                    s.print("1번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[1]*65536)) {
                    setcurpl(cp);
                    s.print("2번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[2]*65536)) {
                    setcurpl(cp);
                    s.print("3번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[3]*65536)) {//Q
                    setcurpl(cp);
                    s.print("4번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[4]*65536)) {//W
                    setcurpl(cp);
                    s.print("5번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[5]*65536)) {//E
                    if (PI.EskillCanUseFlag[cp]) UnitSkillSystem.addExecutor(cp, clickedEPD, 6, PlayerbleCharacterSkill.f_impl);
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[6]*65536)) {//R
                    setcurpl(cp);
                    s.print("7번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[7]*65536)) {//T
                    setcurpl(cp);
                    s.print("8번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[8]*65536)) {//Space
                    setcurpl(cp);
                    s.print("9번 버튼 실행");
                }
                wwrite_epd(clickedEPD+0x98/4,0, $U("Terran Marine")); // 첫 슬롯에 단일스킬
                wwrite_epd(clickedEPD+0x98/4,2, 228); // 두번째 슬롯 비우기
                wwrite_epd(clickedEPD+0x9C/4,0, 228); // 세번째
                wwrite_epd(clickedEPD+0x9C/4,2, 228); // 네번째
                wwrite_epd(clickedEPD+0xA0/4,0, 228); // 다섯번째
            }
            // if (MemoryEPD(clickedEPD + 0x64/4, Exactly, 164) ) {//
            //     if (@KeyDown(cp,"X")) {
            //         //보스스테이지일때만
            //         EUDSwitch(cp);
            //         foreach (i, group : py_enumerate(group_list)) {
            //             EUDSwitchCase()(i);
            //             foreach(unit : group.cploop) {
            //                 unit.move_cp(0x4C/4);
            //                 if (bread_cp(0, 0) == cp) {
            //                     unit.move_cp(0x24 / 4);
            //                     if (bread_cp(0, 2) == 1) {
            //                         MoveUnit(1, PI.class_id[cp], cp, "global_loc", "boss_zone_move_zone");
            //                         const epd = unit.epd;
            //                         boss_zone.add(epd);
            //                         unit.remove();
            //                     }
            //                 }
            //             }
            //             break;
            //         }
            //         EUDEndSwitch();
            //     }
            //     else if (@KeyDown(cp,"C")) {
            //         foreach(unit : boss_zone.cploop) {
            //             unit.move_cp(0x4C/4);
            //             if (bread_cp(0, 0) == cp) {
            //                 unit.move_cp(0x24 / 4);
            //                 if (bread_cp(0, 2) == 1) {
            //                     EUDSwitch(cp);
            //                     foreach (i, group : py_enumerate(group_list)) {
            //                         EUDSwitchCase()(i);
            //                         setloc("Loc1", GC.hunt_zone_center_x[cp], GC.hunt_zone_center_y[cp]);
            //                         MoveUnit(1, PI.class_id[cp], cp, "global_loc", "Loc1");
            //                         const epd = unit.epd;
            //                         group.add(epd);
            //                         break;
            //                     }
            //                     EUDEndSwitch();
            //                     unit.remove();
            //                 }
            //             }
            //         }
            //     }
            // }
            if (MemoryEPD(clickedEPD + 0x64/4, Exactly, 155)) {//플레이어블 유닛
                if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[0]*65536)) {
                    setcurpl(cp);
                    
                    if (PI.hunt_zone_level[cp] > PI.hunt_zone_level_min) {
                        printAll("사냥터 레벨 감소");
                        PI.huntZoneLevelDecrease(cp);
                        HuntZoneSystem.InitHuntZone(cp);
                        
                    }
                    else {
                        println("사냥터 레벨이 이미 최하입니다");
                    }
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[1]*65536)) {
                    setcurpl(cp);
                    if (PI.hunt_zone_level[cp] < PI.hunt_zone_level_max) {
                        printAll("사냥터 레벨 증가");
                        PI.huntZoneLevelIncrease(cp);
                        HuntZoneSystem.InitHuntZone(cp);
                    }
                    else {
                        println("사냥터 레벨이 이미 최대입니다");
                    }
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[2]*65536)) {
                    setcurpl(cp);
                    s.print("3번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[3]*65536)) {//Q
                    setcurpl(cp);
                    s.print("4번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[4]*65536)) {//W
                    setcurpl(cp);
                    s.print("5번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[5]*65536)) {//E
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[6]*65536)) {//R
                    setcurpl(cp);
                    s.print("7번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[7]*65536)) {//T
                    setcurpl(cp);
                    s.print("8번 버튼 실행");
                }
                else if (MemoryEPD(clickedEPD + 0x98/4, Exactly, GC.buttonId[8]*65536)) {//Space
                    setcurpl(cp);
                    s.print("9번 버튼 실행");
                }
                wwrite_epd(clickedEPD+0x98/4,0, $U("Terran Marine")); // 첫 슬롯에 단일스킬
                wwrite_epd(clickedEPD+0x98/4,2, 228); // 두번째 슬롯 비우기
                wwrite_epd(clickedEPD+0x9C/4,0, 228); // 세번째
                wwrite_epd(clickedEPD+0x9C/4,2, 228); // 네번째
                wwrite_epd(clickedEPD+0xA0/4,0, 228); // 다섯번째
            }
           
        }
    }
}


function Loop() {
    
    HandleUnitSpecificInput();
    HuntZoneSystem.HuntStageProgress();
    
    foreach (cp : EUDLoopPlayer(None,Force1)) {
        
        //플레이어 유닛의 업그레이드에 따른 체력 증가
        const hpUgradeLevelInDat = bread(0x58F332+cp*15);
        if (hpUgradeLevelInDat != PI.hPUpgradeLevel[cp]) {
            SetMemory(0x662350 + PI.class_id[cp] * 4, Add,  5*256);
            PI.hPUpgradeLevel[cp]++;
        }

        //사냥 존에서 유닛들이 죽은 경우
        EUDSwitch(cp);
        foreach (i, group : py_enumerate(group_list)) {
            EUDSwitchCase()(i);
            foreach(unit : group.cploop) {
                foreach(dead : unit.dying) {
                    unit.move_cp(0x4C/4);
                    if (bread_cp(0, 0) == 4) {
                        PI.hunt_zone_unit_count[cp] -= 1;
                    }
                }
            }
            break;
        }
        EUDEndSwitch();
    }
}